ðŸ§  Taller Investigativo: Arrays en Python

1. Â¿QuÃ© es un array o una lista en Python?
   
    * Investiga quÃ© son los arrays (o listas) en Python y para quÃ© se utilizan.
      R/
      *Lista(list):* Son heterogeneas, contiene elementos de diferentes tipos de datos (enteros, floats, strings, booleanos, incluso otras listas u objetos). 
      Su tamaÃ±o puede cambiar dinÃ¡micamente; puedes agregar o eliminar elementos fÃ¡cilmente lo que las hace flexibles; pero debido a la flexibilidad de tipos, 
      cada elemento en una lista se almacena como un objeto, lo que implica una mayor sobrecarga de memoria y aunque puedes realizar operaciones en bucle sobre ellas, no estÃ¡n optimizadas para cÃ¡lculos numÃ©ricos a gran escala.
      *Array(array.array):* Son homogeneos, todos los elementos dentro de un  array deben ser del mismo tipo y este tipo se identifica a la hora de crear el array. 
      Un poco menos flexible tambien se puede agregar o eliminar elementos facilmente pero debes tener en cuenta la restriccion del tipo de dato. Al almacenar solo un tipo de dato, 
      los arrays pueden ser mÃ¡s compactos en memoria, especialmente para grandes conjuntos de datos numÃ©ricos. Requieren importar el mÃ³dulo array ya que no son una estructura de datos integrada directamente en Python como las listas.
      
      De manera resumida podemos concluir que una lista es como una caja donde podemos guardar diferentes tipos de elementos y un array es una caja diseÃ±ada especÃ­ficamente para solo guardar un tipo de cosa
      usa listas cuando necesites flexibilidad en los tipos de datos y no estÃ©s tan preocupado por la eficiencia de la memoria para grandes conjuntos de datos homogÃ©neos. Usa arrays (del mÃ³dulo array) cuando 
      la eficiencia de la memoria es importante para grandes conjuntos de datos numÃ©ricos del mismo tipo y cuando necesitas interactuar con sistemas o formatos que requieren tipos de datos especÃ­ficos.
      
    * Â¿CÃ³mo se declara una lista o un array vacÃ­a?
      R/
      *lista(List):* 
         nombre_lista = [1, 2, 3, 4, 5] ; nombre_lista = ["Alice", "Bob", "Charlie"] ; nombre_lista = [1, "hola", 3.14, True] ; nombre_lista = [[1, 2], [3, 4], [5, 6]]
         Los anteriores ejemplos vemos listas de diferentes tipos de datos (lista de enteros, texto o cadenas, lista de diferente tipos de datos y por ultimo una lista que contiene listas por dentro)
         nombre_lista = Â´[] -> para crear una lista vacia simplemente poner el nombre y "=" []
      *Array(array.array):* 
         nombre_array = array.array('i', [10, 20, 30, 40, 50]) -> para crearlo con elementos se especifica el tipo de dato y entre corchetes se agregan elementos
         nombre_array = array.array('i') -> para crearlo vacio solo se esfecifica el tipo de dato
         RECORDAR: para utilizar un array debes importar "import array"

      *Conclusion:* Teoricamente las listas y los arrays son un tipo de arreglo diferente con una diferencia principal entre ambas pero por practicidad se utilizan comunmente las listas ya que facilmente cumplen con cualquier tipo de requerimiento

Ejemplo prÃ¡ctico:

    Crea una lista llamada mi_lista con los nÃºmeros del 1 al 5.
      Ejemplo array:
      import array

      mi_array = array.array('i', [1, 2, 3, 4, 5])

      Ejemplo lista

      mi_lista = [1,2,3,4,5]

2. Â¿CÃ³mo accedemos a los elementos de una lista?

    * Â¿CÃ³mo se accede al primer elemento de una lista?
      R/
      Las datos almacenados dentro de cualquier tipo de arreglo se empiezan a numerar desde el cero
      mi_lista = [1,2,3,4,5] -> tenemos la anterior lista para acceder al primer dato solo utilizamos el nombre de la lista y entre corchetes la posicion mi_lista[0]
    * Â¿QuÃ© significa usar un Ã­ndice negativo?
      R/
      Usar un Ã­ndice negativo en Python para acceder a elementos de una secuencia (como listas, arrays, strings, tuplas) significa que estÃ¡s accediendo a los elementos desde el final de la secuencia en lugar del principio.
      -1: Accede al Ãºltimo elemento de la secuencia.
      -2: Accede al penÃºltimo elemento (el segundo desde el final).
      -3: Accede al antepenÃºltimo elemento (el tercero desde el final), y asÃ­ sucesivamente.

    * Â¿QuÃ© pasa si intento acceder a un Ã­ndice que no existe?
      R/
      Intentar acceder a un Ã­ndice que no existe en una lista o un array en Python genera un error muy comÃºn y Ãºtil para la depuraciÃ³n "IndexError"

Ejemplo prÃ¡ctico:

    Crea una lista [10, 20, 30, 40] y muestra el primer y el Ãºltimo elemento.
      mi_lista = [10, 20, 30, 40]

      primer_elemento = mi_lista[0]
      ultimo_elemento = mi_lista[-1]
      
      print("Primer elemento: ", primer_elemento)
      print("Ultimo elemento: ", ultimo_elemento)

3. Â¿QuÃ© es el "slicing" o rebanado de listas?

    * Â¿QuÃ© significa "slicing" en listas?
      R/
      el "slicing" en listas es una tÃ©cnica fundamental y muy Ãºtil que te permite extraer subconjuntos de elementos de una lista (o array) creando una nueva lista. Es como cortar una torta para obtener porciones.
      En esencia, el slicing te proporciona una manera concisa y poderosa de acceder a rangos especÃ­ficos de elementos sin tener que iterar manualmente sobre ellos. La sintaxis general es: nueva_lista = lista_original[inicio:fin:paso]

    * Â¿CÃ³mo se obtiene una sublista usando slicing?
      R/
      
      ejemplos: 
      mi_lista = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] ; 

      sublista = mi_lista[2:5] -> Obtener los elementos desde el Ã­ndice 2 hasta el Ã­ndice 5 (sin incluir el 5)
      print(sublista)  # Output: [30, 40, 50]

      sublista = mi_lista[:4] -> Obtener los elementos desde el inicio hasta el Ã­ndice 4 (sin incluir el 4):
      print(sublista)  # Output: [10, 20, 30, 40]

      sublista = mi_lista[6:] -> Obtener los elementos desde el Ã­ndice 6 hasta el final
      print(sublista)  # Output: [70, 80, 90, 100]

      copia_lista = mi_lista[:] -> Obtener todos los elementos de la lista (crea una copia superficial)
      print(copia_lista)  # Output: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

      sublista = mi_lista[::2] -> Obtener elementos con un paso de 2
      print(sublista)  # Output: [10, 30, 50, 70, 90]

      lista_reversa = mi_lista[::-1] -> Obtener la lista en reversa
      print(lista_reversa)  # Output: [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]

    * Â¿QuÃ© significa dejar vacÃ­o el inicio o el final en el slicing?
      R/
      inicio (opcional): Es el Ã­ndice del primer elemento que quieres incluir en la nueva lista. Si se omite, se asume que el inicio es el principio de la lista (Ã­ndice 0).
      fin (opcional): Es el Ã­ndice del primer elemento que no quieres incluir en la nueva lista. El slicing se detiene justo antes de este Ã­ndice. Si se omite, se asume que el fin es el final de la lista.
      paso (opcional): Especifica el incremento entre los Ã­ndices de los elementos que se incluirÃ¡n en la nueva lista. Si se omite, se asume un paso de 1 (se toman elementos consecutivos). Un paso negativo te permite recorrer la lista en reversa.

Ejemplo prÃ¡ctico:

    A partir de [10, 20, 30, 40, 50], obtÃ©n:
        Los elementos del Ã­ndice 1 al 3.
         new_list = mi_lista[1:4]
        Los primeros 3 elementos.
         new_list = mi_lista[:3]
        Los elementos desde el Ã­ndice 2 hasta el final.
         new_list = mi_lista[2:]

4. Â¿CÃ³mo modificamos los elementos de una lista?

    * Â¿CÃ³mo se cambia el valor de un elemento de la lista?
      R/
      Cambiar el valor de un elemento en una lista es bastante directo. Simplemente necesitas acceder al elemento utilizando su Ã­ndice y luego asignarle el nuevo valor.
      mi_lista[indice] = nuevo_valor

    * Â¿QuÃ© pasa si modificamos un Ã­ndice que no existe?
      R/
      Si intentas modificar un Ã­ndice que no existe en una lista (es decir, un Ã­ndice que estÃ¡ fuera de los lÃ­mites de la lista), generalmente se producirÃ¡ un error.
      Python: Lanza un IndexError: list assignment index out of range.

Ejemplo prÃ¡ctico:

    Cambia el tercer elemento de [10, 20, 30, 40] por 99.
      mi_lista[3] = 99

5. Â¿CÃ³mo agregamos nuevos elementos a una lista?

    * Â¿CÃ³mo se agrega un elemento al final de la lista?
      R/
      En Python, el mÃ©todo estÃ¡ndar para agregar un elemento al final de una lista es .append().
      mi_lista.append(elemento)

    * Â¿CÃ³mo se inserta un elemento en una posiciÃ³n especÃ­fica?
      R/
      En Python, el mÃ©todo para insertar un elemento en una posiciÃ³n especÃ­fica es .insert().
      mi_lista.inser(inidce,elemento)

    * Â¿CÃ³mo se combinan dos listas en una sola?
      R/
      El operador + te permite concatenar dos listas, creando una nueva lista que contiene todos los elementos de la primera lista seguidos por todos los elementos de la segunda lista.
      lista1 = [1, 2, 3]
      lista2 = [4, 5, 6]
      lista_combinada = lista1 + lista2
      print(lista_combinada)  # Output: [1, 2, 3, 4, 5, 6]

      El mÃ©todo .extend() agrega todos los elementos de una lista al final de otra lista existente (la lista sobre la que se llama el mÃ©todo). Esto modifica la lista original.
      lista1 = [1, 2, 3]
      lista2 = [4, 5, 6]
      lista1.extend(lista2)
      print(lista1)  # Output: [1, 2, 3, 4, 5, 6]
      print(lista2)  # Output: [4, 5, 6] (lista2 no se modifica)

Ejemplo prÃ¡ctico:

    A una lista [10, 20, 30] agrega:
        El nÃºmero 40 al final.
         mi_lista.append(40)
        El nÃºmero 15 en la posiciÃ³n 1.
         mi_lista.insert(1,15)
        Los nÃºmeros 50 y 60 al final de la lista.
         mi_lista.append(50)
         mi_lista.append(60)

6. Â¿CÃ³mo eliminamos elementos de una lista?

    * Â¿CÃ³mo se elimina un valor especÃ­fico de una lista?
      R/
      Usando el mÃ©todo .remove():

    * Â¿QuÃ© hace el mÃ©todo pop()?
      R/
      es una herramienta muy Ãºtil para eliminar y, al mismo tiempo, obtener un elemento de una lista en Python. 

    * Â¿CÃ³mo se elimina un elemento usando del?
      R/
      La palabra clave del en Python es una forma poderosa y flexible de eliminar elementos de una lista (o incluso la lista completa). A diferencia del mÃ©todo .pop(), del no devuelve el valor del elemento eliminado; simplemente lo elimina.
      del mi_lista[1]  # Elimina el elemento en el Ã­ndice 1

Ejemplo prÃ¡ctico:

    De la lista [10, 20, 30, 40, 50], realiza las siguientes acciones:
        Elimina el nÃºmero 30.
        Elimina el Ãºltimo elemento.
        Elimina el segundo elemento (Ã­ndice 1).

7. Â¿CÃ³mo buscamos elementos dentro de una lista?

    Â¿CÃ³mo se verifica si un elemento estÃ¡ presente en una lista?
    Â¿CÃ³mo encontrar el Ã­ndice de un elemento?
    Â¿CÃ³mo contar cuÃ¡ntas veces aparece un valor en la lista?

Ejemplo prÃ¡ctico:

    Con la lista [10, 20, 30, 40, 50]:
        Verifica si el nÃºmero 20 estÃ¡ en la lista.
        Encuentra el Ã­ndice del nÃºmero 30.
        Cuenta cuÃ¡ntas veces aparece el nÃºmero 20.

8. Â¿CÃ³mo ordenamos los elementos de una lista?

    Â¿CÃ³mo se ordena una lista de manera ascendente?
    Â¿CÃ³mo se ordena en orden descendente?
    Â¿QuÃ© diferencia hay entre sort() y sorted()?

Ejemplo prÃ¡ctico:

    Ordena la lista [40, 10, 30, 20]:
        Primero en orden ascendente.
        Luego en orden descendente.
        Crea una nueva lista ordenada sin modificar la original.

9. Â¿CÃ³mo invertimos el orden de los elementos de una lista?

    Â¿CÃ³mo invertir una lista usando reverse()?
    Â¿CÃ³mo invertir una lista usando slicing?

Ejemplo prÃ¡ctico:

    Invierte el orden de [10, 20, 30, 40] utilizando ambas tÃ©cnicas.

10. Â¿CÃ³mo hacemos una copia de una lista?

    Â¿CÃ³mo copiar una lista usando slicing?
    Â¿CÃ³mo copiarla usando list()?
    Â¿CÃ³mo copiarla usando copy()?

Ejemplo prÃ¡ctico:

    Copia la lista [10, 20, 30] de tres maneras diferentes.

11. Â¿CÃ³mo comprobamos si una lista estÃ¡ vacÃ­a?

    Â¿CÃ³mo podemos saber si una lista no tiene elementos?

Ejemplo prÃ¡ctico:

    Crea una lista vacÃ­a y escribe un cÃ³digo que imprima "La lista estÃ¡ vacÃ­a" si no contiene datos.

12. Â¿CÃ³mo pedir varios datos al usuario y almacenarlos en una lista?

    Â¿CÃ³mo pedimos al usuario la cantidad de datos que quiere ingresar?
    Â¿CÃ³mo almacenamos esos datos en una lista usando un ciclo for?

Ejemplo prÃ¡ctico:

    Escribe un programa que:
        Pregunte al usuario cuÃ¡ntos elementos quiere ingresar.
        Luego pida esos elementos uno por uno.
        Finalmente, muestre la lista completa.
